/* * Linker script for a simple ARMv7 assembly build. * *//* Entry point defined as a linker parameter. */SECTIONS{  /* .vectors section starts at address 0 */  .vectors  :   {    *(.cs3.interrupt_vector)   }	    . = ALIGN(4);    /*   * Begin the read-only code section here.   */  .text      :  {    *(.text.cs3.init)    KEEP(*(.text .text.* .gnu.linkonce.t.*))    *(.plt)    *(.gnu.warning)    *(.glue_7t) *(.glue_7) *(.vfp11_veneer)    *(.ARM.extab* .gnu.linkonce.armextab.*)    *(.gcc_except_table)  } =0  . = ALIGN(4);   /*   * --------------------------------------------------   * the .data section contains initialized and writeable   * variables. Data section is loaded at the specified address   * (data NOT loaded in code section).   */    .data : ALIGN(8)  {    KEEP(*(.jcr))    *(.got.plt) *(.got)    *(.shdata)    *(.data .data.* .gnu.linkonce.d.*)    . = ALIGN (8);    *(.ram)    . = ALIGN (8);  }  .bss : ALIGN (8)  {    *(.shbss)    *(.bss .bss.* .gnu.linkonce.b.*)    *(COMMON)    . = ALIGN (8);    *(.ram.b .bss.ram)    . = ALIGN (8);  }   /*   * "_end" is used as the start of the mallocable memoryarea   */  _end = .;  PROVIDE (end = .);  /*   * To see if you've exceeded memory, you can   * check the symbols "_end" for the end of all static   * data memory, and "_etext" for the end of the code,   * against your memory map. -- dvb   */  /*   * ------------------------------------------------------------   * dvb say: "I'll leave all this stuff down here exactly   * as I found it, for debugging info, without   * understanding it."   */  /* Stabs debugging sections.  */  .stab 0 : { *(.stab) }  .stabstr 0 : { *(.stabstr) }  .stab.excl 0 : { *(.stab.excl) }  .stab.exclstr 0 : { *(.stab.exclstr) }  .stab.index 0 : { *(.stab.index) }  .stab.indexstr 0 : { *(.stab.indexstr) }  .comment 0 : { *(.comment) }  /* DWARF debug sections.     Symbols in the DWARF debugging sections are relative to the beginning     of the section so we begin them at 0.  */  /* DWARF 1 */  .debug          0 : { *(.debug) }  .line           0 : { *(.line) }  /* GNU DWARF 1 extensions */  .debug_srcinfo  0 : { *(.debug_srcinfo) }  .debug_sfnames  0 : { *(.debug_sfnames) }  /* DWARF 1.1 and DWARF 2 */  .debug_aranges  0 : { *(.debug_aranges) }  .debug_pubnames 0 : { *(.debug_pubnames) }  /* DWARF 2 */  .debug_info     0 : { *(.debug_info) }  .debug_abbrev   0 : { *(.debug_abbrev) }  .debug_line     0 : { *(.debug_line) }  .debug_frame    0 : { *(.debug_frame) }  .debug_str      0 : { *(.debug_str) }  .debug_loc      0 : { *(.debug_loc) }  .debug_macinfo  0 : { *(.debug_macinfo) }  /* SGI/MIPS DWARF 2 extensions */  .debug_weaknames 0 : { *(.debug_weaknames) }  .debug_funcnames 0 : { *(.debug_funcnames) }  .debug_typenames 0 : { *(.debug_typenames) }  .debug_varnames  0 : { *(.debug_varnames) }  /* These must appear regardless of  .  */}